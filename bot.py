import os
import logging
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("as_lbs_bot")

MAIN_KB = ReplyKeyboardMarkup(
    [["üì• –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"], ["üì≤ WhatsApp", "üìã –ú–µ–Ω—é"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AS-Lbs Customs Bot! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start /help /id /ping /menu", reply_markup=MAIN_KB)

async def id_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à chat_id: {update.effective_chat.id}")

async def ping_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong ‚úÖ")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=MAIN_KB)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üì≤ WhatsApp":
        await update.message.reply_text("–ù–∞—à WhatsApp: https://wa.me/77022746433", reply_markup=MAIN_KB)
        return
    if text in ("üì• –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üìã –ú–µ–Ω—é", "–ú–µ–Ω—é"):
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å (—Ç–æ–≤–∞—Ä/—Å—Ç—Ä–∞–Ω–∞/–ò–Ω–∫–æ—Ç–µ—Ä–º—Å/—Å—Ä–æ–∫–∏).", reply_markup=MAIN_KB)
        return

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.", reply_markup=MAIN_KB)

    if ADMIN_CHAT_ID:
        try:
            admin_id = int(ADMIN_CHAT_ID)
            user = update.effective_user
            name = user.full_name or (user.username or "–∫–ª–∏–µ–Ω—Ç")
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üÜï –ó–∞—è–≤–∫–∞ –æ—Ç {name} (@{user.username or '‚Äî'} | id {user.id}):\n{text}"
            )
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

def main():
    if not TOKEN:
        raise SystemExit("[ERROR] TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ Environment Variables")

    app = Application.builder().token(TOKEN).build()

    # ‚úÖ –ë–µ–∑ create_task: run_polling —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç —Ü–∏–∫–ª –∏ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("id", id_cmd))
    app.add_handler(CommandHandler("ping", ping_cmd))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    log.info("Bot is running (polling, PTB v20)‚Ä¶")
    # drop_pending_updates=True —É–¥–∞–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –ë–ï–ó —Ä—É—á–Ω–æ–≥–æ create_task
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    main()
